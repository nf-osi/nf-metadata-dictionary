# When updates are merged into main, propagate data model updates to various places:
# 1. dcc-site uses assay, etc. for drop-down options; triggers a workflow in dcc-site that creates a PR to pull in new terms.
# 2. The Synapse schema registry has schemas for the NF entities such as portal studies and datasets. Push updated JSON schemas to the Synapse registry.
# 
# Highly related but to be handled by separate workflow:
# Update data model version in DCA-prod for official releases (instead of every merge into main)

name: Propagate data model updates

on:
  push:
    branches: 
      - main
    paths:
      - NF.jsonld
      
env:
  REPO: nf-osi/dcc-site
  REF: refs/heads/main
  SYNAPSE_AUTH_TOKEN: ${{ secrets.DATA_MODEL_SERVICE }}
      
jobs:
  trigger-sync:
    runs-on: ubuntu-latest
    steps:
    
      - name: Dispatch update workflow for dcc-site
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Handle data model update
          repo: ${{ env.REPO }}
          ref: ${{ env.REF }}
          token: ${{ secrets.SERVICE_TOKEN }}

      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Install Python dependencies  
        run: |
          pip install jsonref synapseclient

      - name: Register changed JSON schemas with Synapse
        env:
          SYNAPSE_AUTH_TOKEN: ${{ secrets.NF_SERVICE_TOKEN }}
        run: |
          CHANGED=$(git diff --name-only HEAD HEAD~1 registered-json-schemas)
          if [ -n "$CHANGED" ]; then
            echo "Changed schemas detected: $CHANGED"
            # Convert file paths to just filenames for exclusion list
            ALL_SCHEMAS=$(ls registered-json-schemas/*.json | xargs -n1 basename)
            CHANGED_SCHEMAS=$(echo "$CHANGED" | xargs -n1 basename)
            EXCLUDE_LIST=""
            
            # Build exclude list of schemas that haven't changed
            for schema in $ALL_SCHEMAS; do
              if ! echo "$CHANGED_SCHEMAS" | grep -q "$schema"; then
                EXCLUDE_LIST="$EXCLUDE_LIST $schema"
              fi
            done
            
            if [ -n "$EXCLUDE_LIST" ]; then
              echo "Registering only changed schemas, excluding: $EXCLUDE_LIST"
              python utils/register-schemas.py --schema-dir registered-json-schemas --exclude $EXCLUDE_LIST
            else
              echo "All schemas changed, registering everything"
              python utils/register-schemas.py --schema-dir registered-json-schemas
            fi
          else
            echo "No schema files changed, skipping registration"
          fi
