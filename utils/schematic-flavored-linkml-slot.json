{ "$schema": "http://json-schema.org/draft-07/schema#",
  "additionalProperties": false,
  "title": "meta",
  "properties": {
    "slots": { 
      "type": "object",
      "patternProperties": {
        "[A-Za-z0-9]+": { "$ref": "#/$defs/SlotDefinition" }
      }
    }
  },
  "$defs": {
    "SlotDefinition": {
        "additionalProperties": false,
        "description": "Element that describes how instances are related to other instances",
        "properties": {
            "abstract": {
                "description": "Indicates the class or slot cannot be directly instantiated and is intended for grouping purposes.",
                "type": "boolean"
            },
            "alias": {
                "description": "the name used for a slot in the context of its owning class.  If present, this is used instead of the actual slot name.",
                "type": "string"
            },
            "aliases": {
                "description": "Alternate names/labels for the element. These do not alter the semantics of the schema, but may be useful to support search and alignment.",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "annotations": {
                "type": "object",
                "properties": {
                    "validationRules": {
                       "type": "string",
                       "description": "Schematic validation rules for this property"
                    },
                    "requiresDependency": {
                        "type": "string",
                        "description": "Comma-sep list of properties this property might depend on -- this is generally not used"
                    }
                }
            },
            "any_of": {
                "description": "holds if at least one of the expressions hold",
                "items": {
                    "$ref": "#/$defs/LimitedAnonymousSlotExpressions"
                },
                "type": "array"
            },
            "apply_to": {
                "description": "Used to extend class or slot definitions. For example, if we have a core schema where a gene has two slots for identifier and symbol, and we have a specialized schema for my_organism where we wish to add a slot systematic_name, we can avoid subclassing by defining a class gene_my_organism, adding the slot to this class, and then adding an apply_to pointing to the gene class. The new slot will be 'injected into' the gene class.",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "asymmetric": {
                "description": "If s is antisymmetric, and i.s=v where i is different from v, v.s cannot have value i",
                "type": "boolean"
            },
            "broad_mappings": {
                "description": "A list of terms from different schemas or terminology systems that have broader meaning.",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "children_are_mutually_disjoint": {
                "description": "If true then all direct is_a children are mutually disjoint and share no instances in common",
                "type": "boolean"
            },
            "close_mappings": {
                "description": "A list of terms from different schemas or terminology systems that have close meaning.",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "comments": {
                "description": "notes and comments about an element intended primarily for external consumption",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "conforms_to": {
                "description": "An established standard to which the element conforms.",
                "type": "string"
            },
            "created_by": {
                "description": "agent that created the element",
                "type": "string"
            },
            "created_on": {
                "description": "time at which the element was created",
                "format": "date-time",
                "type": "string"
            },
            "definition_uri": {
                "description": "The native URI of the element. This is always within the namespace of the containing schema. Contrast with the assigned URI, via class_uri or slot_uri",
                "type": "string"
            },
            "deprecated": {
                "description": "Description of why and when this element will no longer be used",
                "type": "string"
            },
            "deprecated_element_has_exact_replacement": {
                "description": "When an element is deprecated, it can be automatically replaced by this uri or curie",
                "type": "string"
            },
            "deprecated_element_has_possible_replacement": {
                "description": "When an element is deprecated, it can be potentially replaced by this uri or curie",
                "type": "string"
            },
            "description": {
                "description": "a textual description of the element's purpose and use",
                "type": "string"
            },
            "designates_type": {
                "description": "True means that the key slot(s) is used to determine the instantiation (types) relation between objects and a ClassDefinition",
                "type": "boolean"
            },
            "disjoint_with": {
                "description": "Two classes are disjoint if they have no instances in common, two slots are disjoint if they can never hold between the same two instances",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "domain": {
                "description": "defines the type of the subject of the slot.  Given the following slot definition\n  S1:\n    domain: C1\n    range:  C2\nthe declaration\n  X:\n    S1: Y\n\nimplicitly asserts that X is an instance of C1\n",
                "type": "string"
            },
            "domain_of": {
                "description": "the class(es) that reference the slot in a \"slots\" or \"slot_usage\" context",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "enum_range": {
                "description": "An inlined enumeration",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "equals_expression": {
                "description": "the value of the slot must equal the value of the evaluated expression",
                "type": "string"
            },
            "equals_number": {
                "description": "the slot must have range of a number and the value of the slot must equal the specified value",
                "type": "integer"
            },
            "equals_string": {
                "description": "the slot must have range string and the value of the slot must equal the specified value",
                "type": "string"
            },
            "equals_string_in": {
                "description": "the slot must have range string and the value of the slot must equal one of the specified values",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "exact_mappings": {
                "description": "A list of terms from different schemas or terminology systems that have identical meaning.",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "from_schema": {
                "description": "id of the schema that defined the element",
                "type": "string"
            },
            "id_prefixes": {
                "description": "An allowed list of prefixes for which identifiers must conform. The identifier of this class or slot must begin with the URIs referenced by this prefix",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "identifier": {
                "description": "True means that the key slot(s) uniquely identifies the elements. There can be at most one identifier or key per container",
                "type": "boolean"
            },
            "ifabsent": {
                "description": "function that provides a default value for the slot.  Possible values for this slot are defined in\nlinkml.utils.ifabsent_functions.default_library:\n  * [Tt]rue -- boolean True\n  * [Ff]alse -- boolean False\n  * bnode -- blank node identifier\n  * class_curie -- CURIE for the containing class\n  * class_uri -- URI for the containing class\n  * default_ns -- schema default namespace\n  * default_range -- schema default range\n  * int(value) -- integer value\n  * slot_uri -- URI for the slot\n  * slot_curie -- CURIE for the slot\n  * string(value) -- string value",
                "type": "string"
            },
            "in_subset": {
                "description": "used to indicate membership of a term in a defined subset of terms used for a particular domain or application.",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "inherited": {
                "description": "true means that the *value* of a slot is inherited by subclasses",
                "type": "boolean"
            },
            "inlined": {
                "description": "True means that keyed or identified slot appears in an outer structure by value.  False means that only the key or identifier for the slot appears within the domain, referencing a structure that appears elsewhere.",
                "type": "boolean"
            },
            "inlined_as_list": {
                "description": "True means that an inlined slot is represented as a list of range instances.  False means that an inlined slot is represented as a dictionary, whose key is the slot key or identifier and whose value is the range instance.",
                "type": "boolean"
            },
            "inverse": {
                "description": "indicates that any instance of d s r implies that there is also an instance of r s' d",
                "type": "string"
            },
            "irreflexive": {
                "description": "If s is irreflexive, then there exists no i such i.s=i",
                "type": "boolean"
            },
            "is_a": {
                "description": "A primary parent slot from which inheritable metaslots are propagated",
                "type": "string"
            },
            "is_class_field": {
                "description": "indicates that for any instance, i, the domain of this slot will include an assertion of i s range",
                "type": "boolean"
            },
            "is_grouping_slot": {
                "description": "true if this slot is a grouping slot",
                "type": "boolean"
            },
            "is_usage_slot": {
                "description": "True means that this slot was defined in a slot_usage situation",
                "type": "boolean"
            },
            "key": {
                "description": "True means that the key slot(s) uniquely identify the elements within a single container",
                "type": "boolean"
            },
            "last_updated_on": {
                "description": "time at which the element was last updated",
                "format": "date-time",
                "type": "string"
            },
            "list_elements_ordered": {
                "description": "If True, then the order of elements of a multivalued slot is guaranteed to be preserved. If False, the order may still be preserved but this is not guaranteed",
                "type": "boolean"
            },
            "list_elements_unique": {
                "description": "If True, then there must be no duplicates in the elements of a multivalued slot",
                "type": "boolean"
            },
            "mappings": {
                "description": "A list of terms from different schemas or terminology systems that have comparable meaning. These may include terms that are precisely equivalent, broader or narrower in meaning, or otherwise semantically related but not equivalent from a strict ontological perspective.",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "maximum_cardinality": {
                "description": "the maximum number of entries for a multivalued slot",
                "type": "integer"
            },
            "maximum_value": {
                "description": "for slots with ranges of type number, the value must be equal to or lowe than this",
                "type": "integer"
            },
            "minimum_cardinality": {
                "description": "the minimum number of entries for a multivalued slot",
                "type": "integer"
            },
            "minimum_value": {
                "description": "for slots with ranges of type number, the value must be equal to or higher than this",
                "type": "integer"
            },
            "mixin": {
                "description": "Indicates the class or slot is intended to be inherited from without being an is_a parent. mixins should not be inherited from using is_a, except by other mixins.",
                "type": "boolean"
            },
            "mixins": {
                "description": "A collection of secondary parent mixin slots from which inheritable metaslots are propagated",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "modified_by": {
                "description": "agent that modified the element",
                "type": "string"
            },
            "multivalued": {
                "description": "true means that slot can have more than one value and should be represented using a list or collection structure.",
                "type": "boolean"
            },
            "name": {
                "description": "the unique name of the element within the context of the schema.  Name is combined with the default prefix to form the globally unique subject of the target class.",
                "type": "string"
            },
            "narrow_mappings": {
                "description": "A list of terms from different schemas or terminology systems that have narrower meaning.",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "notes": {
                "description": "editorial notes about an element intended primarily for internal consumption",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "owner": {
                "description": "the \"owner\" of the slot. It is the class if it appears in the slots list, otherwise the declaring slot",
                "type": "string"
            },
            "pattern": {
                "description": "the string value of the slot must conform to this regular expression expressed in the string",
                "type": "string"
            },
            "range": {
                "description": "defines the type of the object of the slot.  Given the following slot definition\n  S1:\n    domain: C1\n    range:  C2\nthe declaration\n  X:\n    S1: Y\n\nimplicitly asserts Y is an instance of C2\n",
                "type": "string"
            },
            "rank": {
                "description": "the relative order in which the element occurs, lower values are given precedence",
                "type": "integer"
            },
            "readonly": {
                "description": "If present, slot is read only. Text explains why",
                "type": "string"
            },
            "recommended": {
                "description": "true means that the slot should be present in instances of the class definition, but this is not required",
                "type": "boolean"
            },
            "reflexive": {
                "description": "If s is reflexive, then i.s=i for all instances i",
                "type": "boolean"
            },
            "reflexive_transitive_form_of": {
                "description": "transitive_form_of including the reflexive case",
                "type": "string"
            },
            "related_mappings": {
                "description": "A list of terms from different schemas or terminology systems that have related meaning.",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "required": {
                "description": "true means that the slot must be present in instances of the class definition",
                "type": "boolean"
            },
            "role": {
                "description": "a textual descriptor that indicates the role played by the slot range",
                "type": "string"
            },
            "see_also": {
                "description": "A list of related entities or URLs that may be of relevance",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "shared": {
                "description": "If True, then the relationship between the slot domain and range is many to one or many to many",
                "type": "boolean"
            },
            "singular_name": {
                "description": "a name that is used in the singular form",
                "type": "string"
            },
            "slot_group": {
                "description": "allows for grouping of related slots into a grouping slot that serves the role of a group",
                "type": "string"
            },
            "slot_uri": {
                "description": "URI of the class that provides a semantic interpretation of the slot in a linked data context. The URI may come from any namespace and may be shared between schemas.",
                "type": "string"
            },
            "source": {
                "description": "A related resource from which the element is derived.",
                "type": "string"
            },
            "status": {
                "description": "status of the element",
                "type": "string"
            },
            "string_serialization": {
                "description": "Used on a slot that stores the string serialization of the containing object. The syntax follows python formatted strings, with slot names enclosed in {}s. These are expanded using the values of those slots.\nWe call the slot with the serialization the s-slot, the slots used in the {}s are v-slots. If both s-slots and v-slots are populated on an object then the value of the s-slot should correspond to the expansion.\nImplementations of frameworks may choose to use this property to either (a) PARSE: implement automated normalizations by parsing denormalized strings into complex objects (b) GENERARE: implement automated to_string labeling of complex objects\nFor example, a Measurement class may have 3 fields: unit, value, and string_value. The string_value slot may have a string_serialization of {value}{unit} such that if unit=cm and value=2, the value of string_value shouldd be 2cm",
                "type": "string"
            },
            "subproperty_of": {
                "description": "Ontology property which this slot is a subproperty of. Note: setting this property on a slot does not guarantee an expansion of the ontological hiearchy into an enumerated list of possible values in every serialization of the model.",
                "type": "string"
            },
            "symmetric": {
                "description": "If s is symmetric, and i.s=v, then v.s=i",
                "type": "boolean"
            },
            "title": {
                "description": "A concise human-readable display label for the element. The title should mirror the name, and should use ordinary textual punctuation.",
                "type": "string"
            },
            "todos": {
                "description": "Outstanding issues that needs resolution",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "transitive": {
                "description": "If s is transitive, and i.s=z, and s.s=j, then i.s=j",
                "type": "boolean"
            },
            "transitive_form_of": {
                "description": "If s transitive_form_of d, then (1) s holds whenever d holds (2) s is transitive (3) d holds whenever s holds and there are no intermediates, and s is not reflexive",
                "type": "string"
            },
            "union_of": {
                "description": "indicates that the domain element consists exactly of the members of the element in the range.",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "unit": {
                "$ref": "#/$defs/UnitOfMeasure",
                "description": "an encoding of a unit"
            },
            "usage_slot_name": {
                "description": "The name of the slot referenced in the slot_usage",
                "type": "string"
            }
        },
        "required": [
        ],
        "title": "SlotDefinition",
        "type": "object"
        },
        "LimitedAnonymousSlotExpressions": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "mappings": {
                    "description": "A list of terms from different schemas or terminology systems that have comparable meaning. These may include terms that are precisely equivalent, broader or narrower in meaning, or otherwise semantically related but not equivalent from a strict ontological perspective.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "maximum_cardinality": {
                    "description": "the maximum number of entries for a multivalued slot",
                    "type": "integer"
                },
                "maximum_value": {
                    "description": "for slots with ranges of type number, the value must be equal to or lowe than this",
                    "type": "integer"
                },
                "minimum_cardinality": {
                    "description": "the minimum number of entries for a multivalued slot",
                    "type": "integer"
                },
                "minimum_value": {
                    "description": "for slots with ranges of type number, the value must be equal to or higher than this",
                    "type": "integer"
                },
                "narrow_mappings": {
                    "description": "A list of terms from different schemas or terminology systems that have narrower meaning.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "notes": {
                    "description": "editorial notes about an element intended primarily for internal consumption",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "pattern": {
                    "description": "the string value of the slot must conform to this regular expression expressed in the string",
                    "type": "string"
                },
                "range": {
                    "description": "defines the type of the object of the slot.  Given the following slot definition\n  S1:\n    domain: C1\n    range:  C2\nthe declaration\n  X:\n    S1: Y\n\nimplicitly asserts Y is an instance of C2\n",
                    "type": "string"
                },
                "rank": {
                    "description": "the relative order in which the element occurs, lower values are given precedence",
                    "type": "integer"
                },
                "recommended": {
                    "description": "true means that the slot should be present in instances of the class definition, but this is not required",
                    "type": "boolean"
                },
                "related_mappings": {
                    "description": "A list of terms from different schemas or terminology systems that have related meaning.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "required": {
                    "description": "true means that the slot must be present in instances of the class definition",
                    "type": "boolean"
                },
                "see_also": {
                    "description": "A list of related entities or URLs that may be of relevance",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "source": {
                    "description": "A related resource from which the element is derived.",
                    "type": "string"
                },
                "status": {
                    "description": "status of the element",
                    "type": "string"
                },
                "title": {
                    "description": "A concise human-readable display label for the element. The title should mirror the name, and should use ordinary textual punctuation.",
                    "type": "string"
                },
                "todos": {
                    "description": "Outstanding issues that needs resolution",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "unit": {
                    "$ref": "#/$defs/UnitOfMeasure",
                    "description": "an encoding of a unit"
                }
            },
            "title": "LimitedAnonymousSlotExpressions",
            "type": "object"
        },
        "UnitOfMeasure": {
            "additionalProperties": false,
            "description": "A unit of measure, or unit, is a particular quantity value that has been chosen as a scale for measuring other quantities the same kind (more generally of equivalent dimension).",
            "properties": {
                "derivation": {
                    "description": "Expression for deriving this unit from other units",
                    "type": "string"
                },
                "exact_mappings": {
                    "description": "Used to link a unit to equivalent concepts in ontologies such as UO, SNOMED, OEM, OBOE, NCIT",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_quantity_kind": {
                    "description": "Concept in a vocabulary or ontology that denotes the kind of quanity being measured, e.g. length",
                    "type": "string"
                },
                "iec61360code": {
                    "type": "string"
                },
                "symbol": {
                    "description": "name of the unit encoded as a symbol",
                    "type": "string"
                },
                "ucum_code": {
                    "description": "associates a QUDT unit with its UCUM code (case-sensitive).",
                    "type": "string"
                }
            },
            "title": "UnitOfMeasure",
            "type": "object"
        }
    }
}
